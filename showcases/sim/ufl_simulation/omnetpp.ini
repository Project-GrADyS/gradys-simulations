[General]
description = "Setup visualisation, scene origin, sensors"

cmdenv-status-frequency = 10s
cmdenv-output-file = "${resultdir}/${runnumber}.out"

allow-object-stealing-on-deletion=true

## Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"

*.visualizer.*.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.*.sceneVisualizer.sceneMinX = -100000m
*.visualizer.*.sceneVisualizer.sceneMinY = -10000m
*.visualizer.*.sceneVisualizer.sceneMinZ = -10000m
*.visualizer.*.sceneVisualizer.sceneMaxX = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxY = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxZ = 10000m

## Enables visualisation of links, network routes, network nodes
*.visualizer.*.physicalLinkVisualizer.lineShift = 0
##*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.dataLinkVisualizer.lineShift = 0
##*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
*.visualizer.*.networkRouteVisualizer.lineShift = 0
*.visualizer.*.networkNodeVisualizer.displayModuleName = true

## Enables visualization of drone load
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1

## Enables visualization of mobility
*.visualizer.*.mobilityVisualizer.displayMobility = true
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

## Environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false

## Coordinates of the scene origin on the map
## BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 0deg # scene orientation

## Mobility constraint area for quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinY = -10000m 
*.*[*].mobility.constraintAreaMinZ = -10000m
*.*[*].mobility.constraintAreaMaxX = 10000m
*.*[*].mobility.constraintAreaMaxY = 10000m
*.*[*].mobility.constraintAreaMaxZ = 10000m

## Display communication range / interference range from wifi for all quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[0].radio.displayInterferenceRange = false

## Set sensor settings 
*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

[Config Wifi]
network = GradysNetwork
description = "Configure quads, ground stations and sensors for wifi only communication"

## Quad setup:
*.quads[*].numApps = 1

*.quads[*].app[0].typename = "UdpCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime = 1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte

*.quads[*].protocol.typename = "SimpleDroneProtocol"

*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" 
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLatitude = -15.840068deg
*.quads[*].mobility.homeLongitude = -47.926633deg

## Ground station setup
*.groundStation.numApps = 1

*.groundStation.app[0].typename = "UdpCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte
*.groundStation.app[0].startTime = 1s

*.groundStation.protocol.typename = "SimpleGroundProtocol"

*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.mobility.initialAltitude = 0m

*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg

## Sensor setup
*.numSensors = 8

*.sensors[*].numApps = 1

*.sensors[*].app[0].typename = "UdpCommunicationApp"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 8s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte

*.sensors[0..2].protocol.typename = "SimpleProtocolSensor"

*.sensors[*].mobility.typename = "StationaryMobility"  
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[*].mobility.initialAltitude = 0m

*.sensors[0].mobility.initialLatitude = -15.84245230deg
*.sensors[0].mobility.initialLongitude = -47.92948720deg

*.sensors[1].mobility.initialLatitude = -15.84262780deg
*.sensors[1].mobility.initialLongitude = -47.92650460deg

*.sensors[2].mobility.initialLatitude = -15.84161630deg
*.sensors[2].mobility.initialLongitude = -47.92395110deg

*.sensors[3].mobility.initialLatitude = -15.8436264deg
*.sensors[3].mobility.initialLongitude = -47.9270250deg

*.sensors[4].mobility.initialLatitude = -15.8406461deg
*.sensors[4].mobility.initialLongitude = -47.9240263deg

*.sensors[5].mobility.initialLatitude = -15.8416370deg
*.sensors[5].mobility.initialLongitude = -47.9227066deg

*.sensors[6].mobility.initialLatitude = -15.8437115deg
*.sensors[6].mobility.initialLongitude = -47.9259145deg

*.sensors[7].mobility.initialLatitude = -15.8437425deg
*.sensors[7].mobility.initialLongitude = -47.9246378deg

[Config UFL-Map]
extends = Wifi
description = "Map for tests located near UFL's Autonomy Park"

*.groundStation.protocol.throughput.statistic-recording = true
*.groundStation.protocol.throughput:vector.vector-recording = true
**.dataLoad.statistic-recording = true
**.dataLoad.scalar-recording = true

**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false

*.coordinateSystem.sceneLatitude = 29.6314706413837deg
*.coordinateSystem.sceneLongitude = -82.3528289794922deg

# Configuring a stable and simple radio for the comparisons
#**.wlan[0].radio.typename = "Ieee80211UnitDiskRadio"
#*.radioMedium.typename = "UnitDiskRadioMedium"
#**.wlan[0].radio.transmitter.communicationRange = 60m

# Setting up the UAV configurations
*.numUAVs = 3
*.quads[*].mobility.speed = 5mps
*.quads[*].mobility.homeLatitude = 29.6244252808517deg
*.quads[*].mobility.homeLongitude = -82.3603177070618deg
*.quads[0].app[0].destAddresses = "sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] groundStation"
*.quads[1].app[0].destAddresses = "sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] groundStation"
*.quads[2].app[0].destAddresses = "sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] groundStation"

*.quads[*].numFailures = 0
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[*].app[0].sendInterval = 1s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[*].mobility.waypointFile = "paths/UFLpath.waypoints"
#*.quads[*].mobility.waypointFile = "paths/UFLpath-short.waypoints"

# Setting up the sensor configurations
*.numSensors = 6
*.sensors[*].protocol.typename = "DadcaProtocolSensor"
*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2]"
*.sensors[*].mobility.typename = "StationaryMobility"  
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[*].mobility.initialAltitude = 0m
*.sensors[0].mobility.initialLatitude=29.6266770885695deg
*.sensors[0].mobility.initialLongitude=-82.3613905906677deg
*.sensors[1].mobility.initialLatitude=29.6283278124665deg
*.sensors[1].mobility.initialLongitude=-82.3614871501923deg
*.sensors[2].mobility.initialLatitude=29.6292417609568deg
*.sensors[2].mobility.initialLongitude=-82.3597919940948deg
*.sensors[3].mobility.initialLatitude=29.6294842356952deg
*.sensors[3].mobility.initialLongitude=-82.3572063446045deg
*.sensors[4].mobility.initialLatitude=29.6296054728455deg
*.sensors[4].mobility.initialLongitude=-82.3539769649506deg
*.sensors[5].mobility.initialLatitude=29.6314706413837deg
*.sensors[5].mobility.initialLongitude=-82.3528289794922deg

# Settign up ground station configurations
*.groundStation.protocol.typename = "DadcaProtocolGround"
# Placing groundStation way out of the map
*.groundStation.mobility.initialLatitude = 29.6244252808517deg
*.groundStation.mobility.initialLongitude = -82.3603177070618deg 
*.groundStation.mobility.initialAltitude = 0m
*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2]"
*.groundStation.protocol.dataLoggingInterval = 10min


[Config UFL-Centralized]
extends = UFL-Map
network = CentralizedQLearning
description = "Simlation using Centralized Reinforcement Learning on the UFL Map"

*.quads[*].protocol.typename = "CentralizedQProtocol"
*.sensors[*].protocol.typename = "CentralizedQProtocolSensor"
*.groundStation.protocol.typename = "CentralizedQProtocolGround"

*.learner.trainingMode = true
*.learner.qTablePath = "qTable.json"

*.sensors[0].protocol.sensorPosition = 0.166
*.sensors[1].protocol.sensorPosition = 0.332
*.sensors[2].protocol.sensorPosition = 0.498
*.sensors[3].protocol.sensorPosition = 0.664
*.sensors[4].protocol.sensorPosition = 0.83
*.sensors[5].protocol.sensorPosition = 1


*.quads[*].mobility.startTime = 0s
**.app[0].startTime = exponential(1s)

[Config UFL-Centralized-Optimal]
extends = UFL-Centralized
description = "Simulation using centralized learning on the UFL map with optimal parameters learned from simlation campaigns"


[Config UFL-Campaign]
extends = UFL-Centralized
description = "Default configuration for running simulation compaigns using Centralized Learning on the UFL map"

#sim-time-limit = 300000s

*.learner.cumAvgTrainCost.statistic-recording = true
*.learner.cumAvgTrainCost:vector.vector-recording = true
#*.learner.cumTrainCost.statistic-recording = true
#*.learner.cumTrainCost:vector.vector-recording = true
*.learner.trainingCost.statistic-recording = true
*.learner.trainingCost:vector.vector-recording = true
*.learner.epsilon.statistic-recording = true
*.learner.epsilon:vector.vector-recording = true
*.groundStation.protocol.throughput.statistic-recording = true
*.groundStation.protocol.throughput:vector.vector-recording = true
**.dataLoad.statistic-recording = true
**.dataLoad:vector.vector-recording = true
**.avgDataLoad.statistic-recording = true
**.avgDataLoad:vector.vector-recording = true
**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false

*.learner.communicationStorageInterval = 100
*.learner.distanceInterval = 500m
*.learner.sensorStorageTolerance = 50

[Config UFL-Campaign-Test]
extends = UFL-Campaign
*.learner.epsilonHorizon = 600000
*.learner.sensorStorageTolerance = 35
*.learner.trainingMode = ${train=true, false}

[Config UFL-Campaign-All-Train]
extends = UFL-Campaign
*.numUAVs = ${agents = 2}
*.quads[0].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[1].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[2].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[3].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[4].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[5].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[6].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[7].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[8].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[9].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[10].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[11].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[12].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[13] quads[14] quads[15]" ! agents}
*.quads[13].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[14] quads[15]" ! agents}
*.quads[14].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[15]" ! agents}
*.quads[15].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14]" ! agents}

*.learner.epsilonHorizon = 1000
*.learner.distanceInterval = 100m

*.sensors[*].app[0].destAddresses = ${"quads[0] quads[1]", "quads[0] quads[1] quads[2] quads[3]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.groundStation.app[0].destAddresses = ${"quads[0] quads[1]", "quads[0] quads[1] quads[2] quads[3]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}

*.learner.communicationStorageInterval = ${communication = 30}
*.learner.maxDiscreteAgentPackets = ${maxAgent = 3}

*.learner.sensorStorageTolerance = ${tolerance = 30}
*.learner.maxDiscreteAwaitingPackets = ${maxSensor = 3}


*.learner.agentWeight = ${agentWeight = 0}
*.learner.sensorWeight = ${sensorWeight = 0}
*.learner.throughputWeight = ${throughputWeight = 1}

*.learner.costFunction = ${costFunction = 4}

*.learner.learningRate = 0.99

*.learner.startFromScratch = false
#sim-time-limit = ${trainTime = 100000s}
*.learner.epsilonShortCircuit = ${trainTime = true}
repeat = 30
experiment-label = "${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}"
output-scalar-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}.sca"
output-vector-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}.vec"
eventlog-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}.elog"
snapshot-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}.snapshot"
*.learner.qTablePath = "${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}.json"
*.learner.trainingMode = true

[Config UFL-Campaign-All-Test]
extends = UFL-Campaign-All-Train
sim-time-limit=10000s
repeat=1
experiment-label = "${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}-test"
output-scalar-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}-test.sca"
output-vector-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}-test.vec"
eventlog-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}-test.elog"
snapshot-file = "results/${agents}-${communication}-${tolerance}-${maxAgent}-${maxSensor}-${agentWeight}-${sensorWeight}-${throughputWeight}-${trainTime}-${costFunction}-${repetition}-test.snapshot"
*.learner.trainingMode = false

[Config UFL-Campaign-All-Dadca]
extends = UFL-Map
sim-time-limit = 300000s
*.numUAVs = ${agents = 2, 4}
*.quads[0].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[1].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[2].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[3].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[4].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[5].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[6].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[7].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[8].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[9].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[10].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[11].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.quads[12].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[13] quads[14] quads[15]" ! agents}
*.quads[13].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[14] quads[15]" ! agents}
*.quads[14].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[15]" ! agents}
*.quads[15].app[0].destAddresses = ${"groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "groundStation sensors[0] sensors[1] sensors[2] sensors[3] sensors[4] sensors[5] quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14]" ! agents}
*.sensors[*].app[0].destAddresses = ${"quads[0] quads[1]", "quads[0] quads[1] quads[2] quads[3]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}
*.groundStation.app[0].destAddresses = ${"quads[0] quads[1]", "quads[0] quads[1] quads[2] quads[3]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7]", "quads[0] quads[1] quads[2] quads[3] quads[4] quads[5] quads[6] quads[7] quads[8] quads[9] quads[10] quads[11] quads[12] quads[13] quads[14] quads[15]" ! agents}

*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[3].mobility.startTime = 120s
*.quads[4].mobility.startTime = 160s
*.quads[5].mobility.startTime = 200s
*.quads[6].mobility.startTime = 240s
*.quads[7].mobility.startTime = 280s
*.quads[8].mobility.startTime = 320s
*.quads[9].mobility.startTime = 360s
*.quads[10].mobility.startTime = 400s
*.quads[11].mobility.startTime = 420s
*.quads[12].mobility.startTime = 440s
*.quads[13].mobility.startTime = 460s
*.quads[14].mobility.startTime = 480s
*.quads[15].mobility.startTime = 500s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[3].app[*].startTime = normal(120s, 1s)
*.quads[4].app[*].startTime = normal(160s, 1s)
*.quads[5].app[*].startTime = normal(200s, 1s)
*.quads[6].app[*].startTime = normal(240s, 1s)
*.quads[7].app[*].startTime = normal(280s, 1s)
*.quads[8].app[*].startTime = normal(320s, 1s)
*.quads[9].app[*].startTime = normal(360s, 1s)
*.quads[10].app[*].startTime = normal(400s, 1s)
*.quads[11].app[*].startTime = normal(420s, 1s)
*.quads[12].app[*].startTime = normal(440s, 1s)
*.quads[13].app[*].startTime = normal(460s, 1s)
*.quads[14].app[*].startTime = normal(480s, 1s)
*.quads[15].app[*].startTime = normal(500s, 1s)

experiment-label = "dadeca-test"
output-scalar-file = "results/dadca-${agents}.sca"
output-vector-file = "results/dadca-${agents}.vec"
