[General]
description = "Setup visualisation, scene origin, sensors"

scheduler-class = "inet::RealTimeScheduler"

allow-object-stealing-on-deletion=true

network = GradysNetwork

debug-on-errors = true

## Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"

*.visualizer.*.sceneVisualizer.sceneImageSize = 5000m
*.visualizer.*.sceneVisualizer.sceneMinX = -50000m
*.visualizer.*.sceneVisualizer.sceneMinY = -5000m
*.visualizer.*.sceneVisualizer.sceneMinZ = 0m
*.visualizer.*.sceneVisualizer.sceneMaxX = 5000m
*.visualizer.*.sceneVisualizer.sceneMaxY = 5000m
*.visualizer.*.sceneVisualizer.sceneMaxZ = 5000m

## Enables visualization of mobility
*.visualizer.*.mobilityVisualizer.displayMobility = true
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

## Environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false

*.coordinateSystem.sceneLatitude = -35.36326015deg
*.coordinateSystem.sceneLongitude = 149.16523839deg
*.coordinateSystem.sceneHeading = 90deg 

## Mobility constraint area for quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinX = -300m
*.*[*].mobility.constraintAreaMinY = -300m
*.*[*].mobility.constraintAreaMinZ = -5m
*.*[*].mobility.constraintAreaMaxX = 300m
*.*[*].mobility.constraintAreaMaxY = 300m
*.*[*].mobility.constraintAreaMaxZ = 100m


## Setting up simulator paths
*.client[*].mobility.copterSimulatorPath = "/home/lac/Desktop/omnetpp-workspace/gradys-simulations/showcases/sitl/ardupilot_files/simulator/linux/ArduCopter.elf"
*.client[*].mobility.planeSimulatorPath = ""
*.client[*].mobility.roverSimulatorPath = "/home/lac/Desktop/omnetpp-workspace/gradys-simulations/showcases/sitl/ardupilot_files/simulator/linux/ArduRover.elf"

*.client[*].mobility.paramPath = "/home/lac/Desktop/omnetpp-workspace/gradys-simulations/showcases/sitl/ardupilot_files/params/copter.parm" 

# Setting simulation to only start when vehicles are ready
*.client[*].mobility.waitUntilReady = true

# Setting up client
*.numClients = 10

*.client[*].numApps = 1

*.client[*].mobility.typename = "MAVLinkRandomWaypointMobility"
*.client[*].mobility.waitTime = 10s
*.client[*].mobility.coordinateSystemModule = "coordinateSystem"

# Drones
*.client[0..4].osgModel = "3d/drone.ive.1.scale" 
*.client[0..4].mobility.speed = 10mps
*.client[0..4].mobility.vehicleType = 1
*.client[0..4].mobility.paramPath = "/home/lac/Desktop/omnetpp-workspace/gradys-simulations/showcases/sitl/ardupilot_files/params/copter.parm" 

*.client[0..4].app[0].typename = "UdpBasicApp"
*.client[0..4].app[0].destAddresses = "client[5] client[6] client[7] client[8] client[9]"
*.client[0..4].app[0].destPort = 5000
*.client[0..4].app[0].messageLength = 1000B
*.client[0..4].app[0].sendInterval = exponential(1s)
*.client[0..4].app[0].startTime = exponential(10s)
*.client[0..4].app[0].packetName = "UDPData"

# Rover
*.client[5..9].osgModel = "3d/car.ive.(0.15).scale.0,0,270.rot" 
*.client[5..9].mobility.speed = 5mps
*.client[5..9].mobility.vehicleType = 4
*.client[5..9].mobility.paramPath = "/home/lac/Desktop/omnetpp-workspace/gradys-simulations/showcases/sitl/ardupilot_files/params/rover.parm"

*.client[5..9].app[0].typename = "UdpSink"
*.client[5..9].app[0].localPort = 5000
