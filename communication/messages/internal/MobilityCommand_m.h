//
// Generated file, do not edit! Created by nedtool 5.6 from communication/messages/internal/MobilityCommand.msg.
//

#ifndef __PROJETO_MOBILITYCOMMAND_M_H
#define __PROJETO_MOBILITYCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace projeto {

class MobilityCommand;
} // namespace projeto


namespace projeto {

/**
 * Enum generated from <tt>communication/messages/internal/MobilityCommand.msg:19</tt> by nedtool.
 * <pre>
 * // Commands that the mobility module should be capable of carrying out
 * enum MobilityCommandType
 * {
 *     // Makes the drone reverse on its course
 *     // No params
 *     REVERSE = 0;
 * 
 *     // Makes the drone travel to a specific waypoint, following the tour pack
 *     // Param 1: Waypoint index
 *     GOTO_WAYPOINT = 1;
 * 
 *     // Makes the drone go to a specific coordinate and orient itself so it can continue the tour afterwards
 *     // Param 1: x component of the coord
 *     // Param 2: y component of the coord
 *     // Param 3: z component of the coord
 *     // Param 4: Next waypoint (Waypoint the drone should go to after reaching the target)
 *     // Param 5: Last waypoint (Waypoint the drone used to reach the coords)
 *     GOTO_COORDS = 2;
 * }
 * </pre>
 */
enum MobilityCommandType {
    REVERSE = 0,
    GOTO_WAYPOINT = 1,
    GOTO_COORDS = 2
};

/**
 * Class generated from <tt>communication/messages/internal/MobilityCommand.msg:38</tt> by nedtool.
 * <pre>
 * // Message declaration containing the command Id and its parameters 
 * message MobilityCommand
 * {
 *     MobilityCommandType commandType;
 *     double param1 = -1;
 *     double param2 = -1;
 *     double param3 = -1;
 *     double param4 = -1;
 *     double param5 = -1;
 * }
 * </pre>
 */
class MobilityCommand : public ::omnetpp::cMessage
{
  protected:
    projeto::MobilityCommandType commandType = static_cast<projeto::MobilityCommandType>(-1);
    double param1 = -1;
    double param2 = -1;
    double param3 = -1;
    double param4 = -1;
    double param5 = -1;

  private:
    void copy(const MobilityCommand& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MobilityCommand&);

  public:
    MobilityCommand(const char *name=nullptr, short kind=0);
    MobilityCommand(const MobilityCommand& other);
    virtual ~MobilityCommand();
    MobilityCommand& operator=(const MobilityCommand& other);
    virtual MobilityCommand *dup() const override {return new MobilityCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual projeto::MobilityCommandType getCommandType() const;
    virtual void setCommandType(projeto::MobilityCommandType commandType);
    virtual double getParam1() const;
    virtual void setParam1(double param1);
    virtual double getParam2() const;
    virtual void setParam2(double param2);
    virtual double getParam3() const;
    virtual void setParam3(double param3);
    virtual double getParam4() const;
    virtual void setParam4(double param4);
    virtual double getParam5() const;
    virtual void setParam5(double param5);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MobilityCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MobilityCommand& obj) {obj.parsimUnpack(b);}

} // namespace projeto

#endif // ifndef __PROJETO_MOBILITYCOMMAND_M_H

