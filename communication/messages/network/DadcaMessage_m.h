//
// Generated file, do not edit! Created by nedtool 5.6 from communication/messages/network/DadcaMessage.msg.
//

#ifndef __INET_DADCAMESSAGE_M_H
#define __INET_DADCAMESSAGE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif


namespace inet {

class DadcaMessage;
} // namespace inet

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>communication/messages/network/DadcaMessage.msg:22</tt> by nedtool.
 * <pre>
 * enum DadcaMessageType
 * {
 *     HEARTBEAT = 0;
 *     PAIR_REQUEST = 1;
 *     PAIR_CONFIRM = 2;
 *     BEARER = 3;
 * }
 * </pre>
 */
enum DadcaMessageType {
    HEARTBEAT = 0,
    PAIR_REQUEST = 1,
    PAIR_CONFIRM = 2,
    BEARER = 3
};

/**
 * Class generated from <tt>communication/messages/network/DadcaMessage.msg:30</tt> by nedtool.
 * <pre>
 * class DadcaMessage extends FieldsChunk
 * {
 *     chunkLength = B(34); // Fixed chunk length
 *     int sourceID = -1;  // ID of the message's source
 *     int destinationID = -1; // ID of the message's destination
 *     int nextWaypointID = -1; // ID of the next waypoint
 *     int lastWaypointID = -1; // ID of the last waypoint
 *     int dataLength = 5; // Length of the imaginary data being carried in the message
 *     int leftNeighbours = 0; // Neighbours to the left of the drone
 *     int rightNeighbours = 0; // Neighbours to the right of the drone
 *     bool reversed = false; // Reverse flag which indicates the current direction the drone is travelling in
 *     DadcaMessageType messageType = HEARTBEAT; // Type of message
 * }
 * </pre>
 */
class DadcaMessage : public ::inet::FieldsChunk
{
  protected:
    int sourceID = -1;
    int destinationID = -1;
    int nextWaypointID = -1;
    int lastWaypointID = -1;
    int dataLength = 5;
    int leftNeighbours = 0;
    int rightNeighbours = 0;
    bool reversed = false;
    inet::DadcaMessageType messageType = HEARTBEAT;

  private:
    void copy(const DadcaMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DadcaMessage&);

  public:
    DadcaMessage();
    DadcaMessage(const DadcaMessage& other);
    virtual ~DadcaMessage();
    DadcaMessage& operator=(const DadcaMessage& other);
    virtual DadcaMessage *dup() const override {return new DadcaMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSourceID() const;
    virtual void setSourceID(int sourceID);
    virtual int getDestinationID() const;
    virtual void setDestinationID(int destinationID);
    virtual int getNextWaypointID() const;
    virtual void setNextWaypointID(int nextWaypointID);
    virtual int getLastWaypointID() const;
    virtual void setLastWaypointID(int lastWaypointID);
    virtual int getDataLength() const;
    virtual void setDataLength(int dataLength);
    virtual int getLeftNeighbours() const;
    virtual void setLeftNeighbours(int leftNeighbours);
    virtual int getRightNeighbours() const;
    virtual void setRightNeighbours(int rightNeighbours);
    virtual bool getReversed() const;
    virtual void setReversed(bool reversed);
    virtual inet::DadcaMessageType getMessageType() const;
    virtual void setMessageType(inet::DadcaMessageType messageType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DadcaMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DadcaMessage& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef __INET_DADCAMESSAGE_M_H

