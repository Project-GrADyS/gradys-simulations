[General]
description = "Setup visualisation, scene origin, sensors"

cmdenv-status-frequency = 10s
cmdenv-output-file = "${resultdir}/${runnumber}.out"

## Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"

*.visualizer.*.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.*.sceneVisualizer.sceneMinX = -100000m
*.visualizer.*.sceneVisualizer.sceneMinY = -10000m
*.visualizer.*.sceneVisualizer.sceneMinZ = -10000m
*.visualizer.*.sceneVisualizer.sceneMaxX = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxY = 10000m
*.visualizer.*.sceneVisualizer.sceneMaxZ = 10000m

## Enables visualisation of links, network routes, network nodes
*.visualizer.*.physicalLinkVisualizer.lineShift = 0
##*.visualizer.*.physicalLinkVisualizer.displayLinks = true
*.visualizer.*.dataLinkVisualizer.lineShift = 0
##*.visualizer.*.dataLinkVisualizer.displayLinks = true
#*.visualizer.*.networkRouteVisualizer.displayRoutes = true
*.visualizer.*.networkRouteVisualizer.lineShift = 0
*.visualizer.*.networkNodeVisualizer.displayModuleName = true

## Enables visualization of drone load
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1

## Enables visualization of mobility
*.visualizer.*.mobilityVisualizer.displayMobility = true
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

## Environment
*.environment.ground.typename = "FlatGround"
*.quads[*].osgModel = "3d/drone.ive.10.scale.0,0,90.rot"
**.mobility.initFromDisplayString = false

## Coordinates of the scene origin on the map
## BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

## Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 0deg # scene orientation

## Mobility constraint area for quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinX = -10000m
*.*[*].mobility.constraintAreaMinY = -10000m 
*.*[*].mobility.constraintAreaMinZ = -10000m
*.*[*].mobility.constraintAreaMaxX = 10000m
*.*[*].mobility.constraintAreaMaxY = 10000m
*.*[*].mobility.constraintAreaMaxZ = 10000m

## Display communication range / interference range from wifi for all quads, sensors and ground stations
## To specify for quads, sensors or ground stations seperately do the following
## *.{QUADS|SENSORS|GROUNDSTATIONS}[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[*].radio.displayCommunicationRange = true
*.*[*].wlan[0].radio.displayInterferenceRange = false

## Set sensor settings 
*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW
*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

[Config Wifi]
network = GradysNetwork
description = "Configure quads, ground stations and sensors for wifi only communication"

## Quad setup:
*.quads[*].numApps = 1

*.quads[*].app[0].typename = "UdpCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime = 1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte

*.quads[*].protocol.typename = "SimpleDroneProtocol"

*.quads[*].mobility.typename = "DroneMobility"
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" 
*.quads[*].mobility.waypointProximity = 1m
*.quads[*].mobility.speed = 10mps
*.quads[*].mobility.homeLatitude = -15.840068deg
*.quads[*].mobility.homeLongitude = -47.926633deg

## Ground station setup
*.groundStation.numApps = 1

*.groundStation.app[0].typename = "UdpCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].messageLength = 1454Byte
*.groundStation.app[0].startTime = 1s

*.groundStation.protocol.typename = "SimpleGroundProtocol"

*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.mobility.initialAltitude = 0m

*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg

## Sensor setup
*.numSensors = 8

*.sensors[*].numApps = 1

*.sensors[*].app[0].typename = "UdpCommunicationApp"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 8s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte

*.sensors[0..2].protocol.typename = "SimpleSensorProtocol"

*.sensors[*].mobility.typename = "StationaryMobility"  
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"
*.sensors[*].mobility.initialAltitude = 0m

*.sensors[0].mobility.initialLatitude = -15.84245230deg
*.sensors[0].mobility.initialLongitude = -47.92948720deg

*.sensors[1].mobility.initialLatitude = -15.84262780deg
*.sensors[1].mobility.initialLongitude = -47.92650460deg

*.sensors[2].mobility.initialLatitude = -15.84161630deg
*.sensors[2].mobility.initialLongitude = -47.92395110deg

*.sensors[3].mobility.initialLatitude = -15.8436264deg
*.sensors[3].mobility.initialLongitude = -47.9270250deg

*.sensors[4].mobility.initialLatitude = -15.8406461deg
*.sensors[4].mobility.initialLongitude = -47.9240263deg

*.sensors[5].mobility.initialLatitude = -15.8416370deg
*.sensors[5].mobility.initialLongitude = -47.9227066deg

*.sensors[6].mobility.initialLatitude = -15.8437115deg
*.sensors[6].mobility.initialLongitude = -47.9259145deg

*.sensors[7].mobility.initialLatitude = -15.8437425deg
*.sensors[7].mobility.initialLongitude = -47.9246378deg

[Config Zigzag-2-Drones]
extends=Wifi
description="Zigzag simulation with 2 drones and wifi"

*.numUAVs = 2

*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)

*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"

*.quads[*].protocol.typename = "ZigzagProtocol"
*.quads[*].protocol.timeoutDuration = 20s

*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s

*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"

*.groundStation.app[0].destAddresses = "quads[0] quads[1]"

*.groundStation.protocol.typename = "ZigzagProtocol"

*.sensors[*].app[0].destAddresses = "quads[0] quads[1]"

*.sensors[*].protocol.typename = "ZigzagProtocolSensor"
