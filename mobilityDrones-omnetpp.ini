[General]
description = "multiple UAVs hovering"
network = mobilityDrones

# Visualizer settings
*.visualizer.osgVisualizer.typename = "IntegratedOsgVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.typename = "SceneOsgEarthVisualizer"
*.visualizer.osgVisualizer.sceneVisualizer.mapFile = "map.earth"
*.visualizer.osgVisualizer.sceneVisualizer.sceneImageSize = 10000m
*.visualizer.osgVisualizer.sceneVisualizer.axisLength = 500m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinX = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinY = -200m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMinZ = 0m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxX = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxY = 5000m
*.visualizer.osgVisualizer.sceneVisualizer.sceneMaxZ = 5000m

# network node visualization: disable labels
*.visualizer.osgVisualizer.networkNodeVisualizer.displayModuleName = true

# enable drone load visualization
*.visualizer.*.statisticVisualizer.signalName = "dataLoad"
*.visualizer.*.statisticVisualizer.format = "(%v)"
*.visualizer.*.statisticVisualizer.textColor = "red"
*.visualizer.*.statisticVisualizer.font = "Courier New, 12px, bold"
*.visualizer.*.statisticVisualizer.opacity = 1
*.visualizer.*.statisticVisualizer.sourceFilter = "*.quads[*].** *.groundStation.**"

# mobility visualization
*.visualizer.*.mobilityVisualizer.displayMobility = true # master switch
*.visualizer.*.mobilityVisualizer.displayPositions = true
*.visualizer.*.mobilityVisualizer.displayOrientations = true
*.visualizer.*.mobilityVisualizer.displayVelocities = true
*.visualizer.*.mobilityVisualizer.displayMovementTrails = true
*.visualizer.*.mobilityVisualizer.animationSpeed = 10

*.visualizer.mediumVisualizer.displaySignals = true

# mobility constraint area
**.constraintAreaMinX = -5000m
**.constraintAreaMinY = -5000m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 5000m
**.constraintAreaMaxY = 5000m
**.constraintAreaMaxZ = 5000m
# original from 2D: **.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module

*.quads.wlan[0].radio.displayCommunicationRange = true



*.sensor*.wlan[0].radio.energyConsumer.typename = "SensorStateBasedEpEnergyConsumer"
*.sensor*.wlan[0].radio.energyConsumer.offPowerConsumption = 0mW
*.sensor*.wlan[0].radio.energyConsumer.sleepPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.switchingPowerConsumption = 1mW
*.sensor*.wlan[0].radio.energyConsumer.receiverIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.receiverBusyPowerConsumption = 5mW
*.sensor*.wlan[0].radio.energyConsumer.receiverReceivingPowerConsumption = 10mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterIdlePowerConsumption = 2mW
*.sensor*.wlan[0].radio.energyConsumer.transmitterTransmittingPowerConsumption = 100mW

*.sensor*.energyStorage.typename = "IdealEpEnergyStorage"

*.sensor*.wlan[0].radio.displayInterferenceRange = false

# Coordinates of the scene origin on the map
#BSB
#*.coordinateSystem.sceneLatitude = -15.84584deg
#*.coordinateSystem.sceneLongitude = -47.93052deg
#*.coordinateSystem.sceneHeading = 90deg

#PUC
#*.coordinateSystem.sceneLongitude = -43.22260deg
#*.coordinateSystem.sceneLatitude = -22.97556deg
#*.coordinateSystem.sceneHeading = 90deg # scene orientation

#Campo
*.coordinateSystem.sceneLongitude = -47.926634deg
*.coordinateSystem.sceneLatitude = -15.840075deg
*.coordinateSystem.sceneHeading = 90deg # scene orientation

#environment
*.environment.ground.typename = "FlatGround"
#*.numUAVs = 2
*.quads[*].osgModel = "3d/drone.ive.80.scale.0,0,90.rot"
#*.quads[*].mobility.typename = "DroneMobility" 
*.quads[*].mobility.coordinateSystemModule = "coordinateSystem" # Empty if the drone should follow Euclidean coordinates or "coordinateSystem" if it should follow coordinates
*.quads[*].mobility.waypointFile = "paths/gradys-vai-e-volta-descendo-5s-v1.txt"
*.quads[*].mobility.waypointProximity = 1m
**.mobility.initFromDisplayString = false
# Node position settings
#*.quads[0].mobility.initialX = 30m
#*.quads[0].mobility.initialY = 30m
#*.quads[0].mobility.initialZ = 0m
#**.updateInterval = 0.1s # test with 0s too, and let getCurrentPosition update the display string from a test module
#*.host[*].mobility.changeInterval = 1s
#*.host[*].mobility.initialMovementHeading = uniform(0deg, 360deg)
#*.host[*].mobility.initialMovementElevation = uniform(-90deg, 90deg)
#*.host[*].mobility.angleDelta = uniform(-10deg,10deg)
#*.host[*].mobility.rotationAxisAngle = uniform(-10deg,10deg)
*.quads[*].mobility.speed = 10mps
#*.host[*].mobility.faceForward = false
#**.constraintAreaMinZ = 0m


# drone networking:

*.quads[*].numApps = 1
*.quads[*].app[0].typename = "UdpMobileNodeCommunicationApp"
*.quads[*].app[0].localPort = 1000
*.quads[*].app[0].destPort = 1000
*.quads[*].app[0].sendInterval = 1s
*.quads[*].app[0].startTime =1s
*.quads[*].app[0].stopTime = -1s
*.quads[*].app[0].messageLength = 1454Byte
*.quads[*].app[0].packetName = "UAV-DEFAULT-PAYLOAD" #packetName is used as a default payload
##
*.quads[*].mobility.typename = "DroneMobility"
#*.quads[*].app[1].typename = "UdpSinkMobileNode"
#*.quads[*].app[1].localPort = 1000

# Sensor settings
#*.sensors[*].osgModel = "3d/drone.ive.100.scale.0,0,90.rot"
*.sensors[*].mobility.typename = "StationaryMobility"  
*.sensors[*].mobility.coordinateSystemModule = "coordinateSystem"


#*.sensor*.numApps = 2
#*.sensor*.app[0].typename = "UdpBasicAppMobileSensorNode"
##*.sensor*.app[0].destAddresses = "quads[0] quads[1]"
#*.sensor*.app[0].destPort = 1000
#*.sensor*.app[0].sendInterval = 0.1s
#*.sensor*.app[0].startTime = 1s #exponential(1s)
#*.sensor*.app[0].messageLength = 1454Byte
#*.sensor*.app[0].packetName = "SENSOR-DEFAULT-PAYLOAD" #packetName is used as a default payload
#
#*.sensor*.app[1].typename = "UdpSinkMobileSensorNode"
#*.sensor*.app[1].localPort = 1000

# Ground station configs
*.groundStation.mobility.typename = "StationaryMobility"
*.groundStation.mobility.coordinateSystemModule = "coordinateSystem"
*.groundStation.numApps = 1
*.groundStation.app[0].typename = "UdpMobileNodeCommunicationApp"
*.groundStation.app[0].destPort = 1000
*.groundStation.app[0].localPort = 1000
*.groundStation.app[0].sendInterval = 1s
*.groundStation.app[0].stopTime = -1s
*.groundStation.app[0].messageLength = 1454Byte
*.groundStation.app[0].packetName = "UAV-DEFAULT-PAYLOAD"

*.radioMedium.backgroundNoise.bandwidth = 22MHz
*.radioMedium.backgroundNoise.power = -110dBm

*.groundStation.wlan[1].radio.receiver.bandwidth = 22MHz
*.sensors[*].wlan[1].radio.receiver.bandwidth = 22MHz # HACK - work with two radios with different bandwitdths (2.8MHz and 22MHz)
*.quads[*].wlan[1].radio.receiver.bandwidth = 22MHz # HACK - work with two radios with different bandwitdths (2.8MHz and 22MHz)

*.groundStation.wlan[1].radio.bandwidth = 22MHz
*.sensors[*].wlan[1].radio.bandwidth = 22MHz
*.quads[*].wlan[1].radio.bandwidth = 22MHz

**.analogModel.ignorePartialInterference = true

*.quads[*].app[1].startTime = 0

*.sensors[*].ipv4.arp.typename = "GlobalArp"
*.quads[*].ipv4.arp.typename = "GlobalArp"
*.groundStation.ipv4.arp.typename = "GlobalArp"

*.sensors[*].ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"
*.quads[*].ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"
*.groundStation.ipv4.ip.directBroadcastInterfaces = "wlan0,wlan1"

*.sensors[*].ipv4.ip.limitedBroadcast = true
*.quads[*].ipv4.ip.limitedBroadcast = true

*.sensors[*].ipv4.ip.directBroadcastInterfaces = "wlan1"
*.quads[*].ipv4.ip.directBroadcastInterfaces = "wlan1"

*.sensors[*].ipv4.ip.limitedBroadcast = true
*.quads[*].ipv4.ip.limitedBroadcast = true
*.groundStation.ipv4.ip.limitedBroadcast = true

*.sensors[*].app[1].typename = "MamNodeApp"
*.sensors[*].app[1].destAddresses = "quads[1]"
*.sensors[*].app[1].localPort = 5000
*.sensors[*].app[1].destPort = 5000
*.sensors[*].app[1].messageLength = 1000B
*.sensors[*].app[1].sendInterval = exponential(12ms)
*.sensors[*].app[1].packetName = "UDPData"
*.sensors[*].app[1].delta = 0
*.sensors_rly[*].app[1].relayNode = true


*.quads[*].numWlanInterfaces = 2
*.quads[*].wlan[1].typename = "BleMeshNarrowbandInterface"
*.quads[*].wlan[1].radio.transmitter.power = 0.275mW # Reducing power to match Bluetooth Low Energy 100m range

*.sensors[*].wlan[1].typename = "BleMeshNarrowbandInterface"
*.sensors[*].numWlanInterfaces = 2
*.sensors_lpn[*].wlan[1].mac.lowPowerNode = true
*.sensors_lpn[*].app[1].lowPowerNode = true
*.sensors_fn[*].app[1].friendNode = true
*.sensors[*].wlan[1].radio.transmitter.power = 0.275mW # Reducing power to match Bluetooth Low Energy 100m range

# General sensor and ground station configurations
*.numSensors = 8
*.sensors[*].numApps = 2
*.sensors[0..2].app[0].typename = "UdpSensorCommunicationApp"
*.sensors[0..2].protocol.typename = "DadcaProtocolSensor"
*.sensors[*].app[0].destPort = 1000
*.sensors[*].app[0].localPort = 1000
*.sensors[*].app[0].sendInterval = 8s
*.sensors[*].app[0].startTime = exponential(1s)
*.sensors[*].app[0].messageLength = 1454Byte
*.sensors[*].app[1].relayMode = "BMesh"
*.sensors[*].mobility.initialAltitude = 0m
*.sensors[0].mobility.initialLatitude = -15.84245230deg
*.sensors[0].mobility.initialLongitude = -47.92948720deg
*.sensors[1].mobility.initialLatitude = -15.84262780deg
*.sensors[1].mobility.initialLongitude = -47.92650460deg
*.sensors[2].mobility.initialLatitude = -15.84161630deg
*.sensors[2].mobility.initialLongitude = -47.92395110deg


*.sensors[3..7].app[0].typename = "UdpSensorCommunicationApp"
*.sensors[3].mobility.initialLatitude = -15.8436264deg
*.sensors[3].mobility.initialLongitude = -47.9270250deg
*.sensors[4].mobility.initialLatitude = -15.8406461deg
*.sensors[4].mobility.initialLongitude = -47.9240263deg
*.sensors[5].mobility.initialLatitude = -15.8416370deg
*.sensors[5].mobility.initialLongitude = -47.9227066deg
*.sensors[6].mobility.initialLatitude = -15.8437115deg
*.sensors[6].mobility.initialLongitude = -47.9259145deg
*.sensors[7].mobility.initialLatitude = -15.8437425deg
*.sensors[7].mobility.initialLongitude = -47.9246378deg

*.groundStation.protocol.typename = "DadcaProtocol"
*.groundStation.mobility.initialLatitude = -15.840068deg
*.groundStation.mobility.initialLongitude = -47.926633deg
*.groundStation.app[0].startTime = 130s


[Config Sim2drone]
*.numUAVs = 2
*.quads[*].numApps = 2
*.quads[*].app[1].typename = "MamDataCollectorApp"
*.quads[*].app[1].localPort = 5000
*.quads[*].app[1].destPort = 5000
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)

*.sensors[*].app[0].destAddresses = "quads[0] quads[1]"

*.groundStation.app[0].destAddresses = "quads[0] quads[1]"

[Config Sim3drone]
*.numUAVs = 3
*.quads[*].numApps = 2
*.quads[*].app[1].typename = "MamDataCollectorApp"
*.quads[*].app[1].localPort = 5000
*.quads[*].app[1].destPort = 5000
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[0].app[0].destAddresses = "quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)

*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2]"


*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2]"

[Config Sim4drone]
*.numUAVs = 4
*.quads[*].numApps = 2
*.quads[*].app[1].typename = "MamDataCollectorApp"
*.quads[*].app[1].localPort = 5000
*.quads[*].app[1].destPort = 5000
*.quads[*].protocol.typename = "DadcaProtocol"
*.quads[0].app[0].destAddresses = "quads[1] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] quads[2] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[2].app[0].destAddresses = "quads[0] quads[1] quads[3] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[3].app[0].destAddresses = "quads[0] quads[1] quads[2] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[*].mobility.waypointFile = "paths/voo_ar.waypoints"
*.quads[*].protocol.timeoutDuration = 20s
*.quads[0].mobility.startTime = 0s
*.quads[1].mobility.startTime = 40s
*.quads[2].mobility.startTime = 80s
*.quads[3].mobility.startTime = 110s
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(40s, 1s)
*.quads[2].app[*].startTime = normal(80s, 1s)
*.quads[3].app[*].startTime = normal(110s, 1s)

*.sensors[*].app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"


*.groundStation.app[0].destAddresses = "quads[0] quads[1] quads[2] quads[3]"

[Config Simple]
# Sets the description of the launch configuration.
# Shown when you launch a simulation and are prompted to select the correct launch configuration.
description = "simple protocol configuration"
# UAV Configurations
# This parameter is declared in the mobilityDrones.ned network and defines the number of UAVs
# in the simulation.
*.numUAVs = 2

# Apps are user implemented modules that extend the behaviour of INET communication modules.
# In this case our app will be the communication part of our three part solution.
*.quads[*].numApps = 1

# The communbication module automatically filters messages from nodes that are not included in the
# destAddresses parameter. Be careful not to set the node as a destination address to itself.
*.quads[0].app[0].destAddresses = "quads[1] sensors[0] sensors[1] sensors[2] groundStation"
*.quads[1].app[0].destAddresses = "quads[0] sensors[0] sensors[1] sensors[2] groundStation"

# The waypointFile parameter is declared in DroneMobility.ned and specifies the waypoint list
# the drones will follow.
*.quads[0].mobility.waypointFile = "paths/voo_sensor1.waypoints"
*.quads[1].mobility.waypointFile = "paths/voo_sensor2.waypoints"

# The typename parameter of the protocol specifies the filename of the protocol implementation
# the protocol module will use.
*.quads[*].protocol.typename = "SimpleDroneProtocol"

# The normal() function gives us a value within 1s of 1s. This is used instead of a fixed value
# because if both the quads communication apps started at 1s and had the same interval between
# messages (defined by the .sendInterval parameter) they would be forever syncronized and their
# messages would always interfere with each other in the medium.
*.quads[0].app[*].startTime = normal(1s, 1s)
*.quads[1].app[*].startTime = normal(1s, 1s)

# Sensor configurations
*.sensors[*].app[*].destAddresses = "quads[0] quads[1]"
*.sensors[0..2].protocol.typename = "SimpleSensorProtocol"

# Groundstation configurations
# Setting the ground station as a sensor because it is a passive listener in this config
*.groundStation.app[0].typename = "UdpSensorCommunicationApp"
*.groundStation.app[*].destAddresses = "quads[0] quads[1]"
*.groundStation.protocol.typename = "SimpleGroundProtocol"
*.groundStation.app[0].startTime = 0s

